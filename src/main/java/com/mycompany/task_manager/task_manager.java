

package com.mycompany.task_manager;

/**
 *
 * @author kathe
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class task_manager extends javax.swing.JFrame {

    private JTextField tareaTextField;
    private JList<Tarea> listaTareas;
    private DefaultListModel<Tarea> listaModelo;
    private JButton btnAgregar;
    private JButton btnMarcarCompleta;
    private JButton btnEliminar;

    private List<Tarea> tareas;

    public task_manager() {
        super("My task manager");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(295, 400); 
        // pack();
        getContentPane().setBackground(Color.PINK);      
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);

    }
      private void initComponents() {
       
        JPanel panel = new JPanel(new BorderLayout());

        tareaTextField = new JTextField();
        panel.add(tareaTextField, BorderLayout.NORTH);
        panel.setBackground(Color.pink);

      
        listaModelo = new DefaultListModel<>();
        listaTareas = new JList<>(listaModelo);
        JScrollPane scrollPane = new JScrollPane(listaTareas);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        scrollPane.setBackground(Color.PINK);

        JPanel btnPanel = new JPanel(new FlowLayout());
        btnPanel.setBackground(Color.PINK);
        btnAgregar = new JButton("Agregar");
        btnAgregar.setBackground(Color.green);
        
        btnAgregar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                agregarTarea();
            }
        });
        
        
        btnPanel.add(btnAgregar);

        btnMarcarCompleta = new JButton("Marcar Completa");
        btnMarcarCompleta.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                marcarCompleta();
            }
        });
        btnPanel.add(btnMarcarCompleta);

        btnEliminar = new JButton("Eliminar");
        btnEliminar.setBackground(Color.red);
        
        btnEliminar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                eliminarTarea();
            }
        });
        btnPanel.add(btnEliminar);

        panel.add(btnPanel, BorderLayout.SOUTH);

        add(panel);

        tareas = new ArrayList<>();
    }

    private void agregarTarea() {
        String nombreTarea = tareaTextField.getText().trim();
        if (!nombreTarea.isEmpty()) {
            Tarea nuevaTarea = new Tarea(nombreTarea);
            tareas.add(nuevaTarea);
            listaModelo.addElement(nuevaTarea);
            tareaTextField.setText("");
        }
    }

    private void marcarCompleta() {
        int indiceSeleccionado = listaTareas.getSelectedIndex();
        if (indiceSeleccionado != -1) {
            Tarea tarea = listaModelo.getElementAt(indiceSeleccionado);
            tarea.setCompletada(true);
            listaModelo.setElementAt(tarea, indiceSeleccionado);
        }
    }

    private void eliminarTarea() {
        int indiceSeleccionado = listaTareas.getSelectedIndex();
        if (indiceSeleccionado != -1) {
            tareas.remove(indiceSeleccionado);
            listaModelo.remove(indiceSeleccionado);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    /*
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(task_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(task_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(task_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(task_manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new task_manager().setVisible(true);
            }
        });
    }
    class Tarea {
        
        private final String nombre;
        private boolean completada;

        public Tarea(String nombre) {
            this.nombre = nombre;
            this.completada = false;
        }

        public String getNombre() {
            return nombre;
        }

        public boolean isCompletada() {
            return completada;
        }

        public void setCompletada(boolean completada) {
            this.completada = completada;
        }

        @Override
        public String toString() {
            return nombre + (completada ? "      âœ”" : "");
        }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
